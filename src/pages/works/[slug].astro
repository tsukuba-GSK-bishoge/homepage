---
import { getImage } from "astro:assets";
import { getCollection } from "astro:content";
import { render } from "astro:content";

export async function getStaticPaths() {
  const works = await getCollection("works");
  return works.map((work) => ({
    params: { slug: work.id },
    props: { work },
  }));
}

const { work } = Astro.props;
const { Content } = await render(work);

// src/内にある画像はビルド時に最適化されて/_astro/内に格納される
// 一般にはimportを使って取り込むが、文字列リテラルになり得ないパスの場合、
// 次のようにimport.meta.globを用いて動的に取り込む必要がある
// ただし、背景画像に用いる際、cssにurlを渡す必要性からgetImageを用いる
const keyVisualPath = "/src/assets/works/" + work.id + "/keyvisual.png";
const images = import.meta.glob<{ default: ImageMetadata }>("/src/assets/works/*/keyvisual.{jpeg,jpg,png,gif}");
if (!images[keyVisualPath]) {
  throw new Error(`"${keyVisualPath}" does not exist in glob: "/src/assets/works/*/keyvisual.{jpeg,jpg,png,gif}"`);
}
const backgroundImage = await getImage({ src: images[keyVisualPath](), width: 500, height: 500 });
---

<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>Astro Basics</title>
  </head>
  <body>
    <div
      id="wrapper"
      style={{
        backgroundImage: `url(${backgroundImage.src})`,
      }}>
      <div id="header">
        <h1>{work.data.title}</h1>
      </div>
      <h1 id="h1-back">{work.data.title}</h1>
      <!-- <h2>投稿者: {work.data.author}</h2> -->
      <p>{work.data.description}</p>
      <Content />
      <p>© {new Date().getFullYear()} 筑波大学現代視覚文化研究会美少女ゲーム制作班/Philia All Rights Reserved.</p>
    </div>
  </body>
</html>

<style>
  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
    background-color: #4d484d;
    scroll-behavior: smooth;
    scroll-padding-top: 8em;
  }

  #wrapper {
    padding: 2em;
    padding-top: 8em;

    /* background-image: var(--backgroundImageUrl); */
    background-attachment: fixed;
    /* background-attachment: scroll; */
    background-size: contain;
    background-repeat: no-repeat;
    background-color: rgba(255, 255, 255, 0.8);
    background-blend-mode: lighten;
    background-position: center;

    text-align: center;

    img {
      /* max-height: 90vh; */
      /* max-width: 80vw; */
      width: auto;
      height: 90vh;
      @media screen and (max-width: 768px) {
        width: 80vw;
        height: auto;
      }
      display: block;
      margin: auto;
    }

    blockquote {
      margin: 0 auto;
      padding: 0.5em;
      width: 70%;
      border-radius: 0.5em;
      background-color: #fff1ff;
    }

    code {
      background-color: #fff1ff;
      border-radius: 0.25em;
    }

    .astro-code {
      margin: 0 auto;
      padding: 0.5em;
      width: 70%;
      border-radius: 0.5em;
      text-align: left;
      code {
        background-color: #24292e;
        border-radius: 0;
      }
    }

    table {
      margin: 0 auto;
      border-spacing: 0;
      border-radius: 0.5em;
      border-collapse: separate;

      thead {
        th {
          padding: 0.6em;
          background-color: #ffa0d8;
        }
        tr:first-child th:first-child {
          border-top-left-radius: 0.5em;
        }
        tr:first-child th:last-child {
          border-top-right-radius: 0.5em;
        }
      }
      tbody {
        tr:nth-child(odd) td {
          background-color: #fff1ff;
        }
        tr:nth-child(even) td {
          background-color: #ffdcff;
        }
        td {
          padding: 0.6em;
        }
        tr:last-child td:first-child {
          border-bottom-left-radius: 0.5em;
        }
        tr:last-child td:last-child {
          border-bottom-right-radius: 0.5em;
        }
      }
    }

    hr {
      margin-top: 1em;
      margin-bottom: 1em;
      width: 80%;
      height: 0;
      padding: 0;
      border: 0;
      border-top: 6px dotted #ff6bc2;
    }
  }

  #header {
    background-color: #ffa0d8;
    z-index: 100;
    position: fixed;
    top: 0;
    left: 0;
    width: 24em;
    height: 10em;
    clip-path: polygon(0 0, 100% 0, 100% 0, 0 100%);

    & > h1 {
      font-size: 4em;
      color: #fff;
      position: fixed;
      margin: 0;
      top: 0.5em;
      left: 0.5em;
    }
  }

  #h1-back {
    font-size: 4em;
    color: #ffa0d8;
    position: fixed;
    margin: 0;
    top: 0.5em;
    left: 0.5em;
    z-index: 99;
  }
</style>
